#set -x



function __scope__ {

	#local _DBG_MSG_=${_DBG_MSG_- }
	local _DBG_MSG_=${_DBG_MSG_-1}
	local _INF_MSG_=${_INF_MSG_-1}
	
	
	
	if [ $1 ]
	then
		if [ ! -r $1 ]
		then
			echo "error: include file ( $1 ) can not read !"
			return 1
		fi
		. $@ ""
	fi
	
	
	
	PROJECTHOME=$(dirname `readlink -f $BASH_SOURCE`)
	
	
	
	[ $_DBG_MSG_ ] && echo "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"
	[ $_DBG_MSG_ ] && echo "           PATH: $PATH"
	[ $_DBG_MSG_ ] && echo
	
	

	local IFS=$'\n'

	local _FILE_
	local _LINE_

	cd $PROJECTHOME

	for _FILE_ in $(
			  ls -1 $(find $PROJECTHOME -regextype posix-egrep -regex ".*/.project.path.lib(.[0-9]+)?") \
			| sed -e 's/\.project\.path\.lib/\*/' \
			| sort -nt '*' -k2 \
			| sed -e 's/\*/.project.path.lib/'
		)
	do
		cd $(dirname $_FILE_)
		
		for _LINE_ in $(cat $_FILE_)
		do
			LD_LIBRARY_PATH=$(readlink -f $_LINE_)${LD_LIBRARY_PATH:+:}$LD_LIBRARY_PATH
		done
	done

	cd $PROJECTHOME

	for _FILE_ in $(
			  ls -1 $(find $PROJECTHOME -regextype posix-egrep -regex ".*/.project.path.bin(.[0-9]+)?") \
			| sed -e 's/\.project\.path\.bin/\*/' \
			| sort -nt '*' -k2 \
			| sed -e 's/\*/.project.path.bin/'
		)
	do
		cd $(dirname $_FILE_)
		
		for _LINE_ in $(cat $_FILE_)
		do
			PATH=$(readlink -f $_LINE_)${PATH:+:}$PATH
		done
	done

	cd $PROJECTHOME



	[ $_INF_MSG_ ] && echo "    PROJECTHOME: $PROJECTHOME"
	[ $_INF_MSG_ ] && echo "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"
	[ $_INF_MSG_ ] && echo "           PATH: $PATH"
	[ $_INF_MSG_ ] && echo
	
	
	
	export PATH LD_LIBRARY_PATH PROJECTHOME
	
	return 0
}
__scope__ $@




